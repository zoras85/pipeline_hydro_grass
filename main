# ─────────────────────────────────────────────────────────────────────────────
# hydro_pipeline/main.py
# ─────────────────────────────────────────────────────────────────────────────
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Point d'entrée principal du pipeline hydrologique.

Fournit deux modes d'exécution :
1. En tant que module : `python -m hydro_pipeline.main`
2. En tant que script : `python hydro_pipeline/main.py`

Gère automatiquement les chemins d'import pour les deux modes.
"""

from __future__ import annotations
import argparse
import sys
import os
import logging
from typing import Optional

# ──────────────────────────────────────────────────────────────────────
# Configuration des imports selon le mode d'exécution
# ──────────────────────────────────────────────────────────────────────

def _ajuster_chemins_import():
    """Ajuste sys.path pour permettre l'exécution directe du script."""
    if __package__ in (None, ""):
        dossier_parent = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
        if dossier_parent not in sys.path:
            sys.path.insert(0, dossier_parent)

# Applique l'ajustement avant les imports
_ajuster_chemins_import()

# Import conditionnel selon le mode
if __package__ in (None, ""):
    import hydro_pipeline.gui as gui
    import hydro_pipeline.logging_setup as logging_setup
    import hydro_pipeline.config_io as config_io
else:
    from . import gui, logging_setup, config_io

# ──────────────────────────────────────────────────────────────────────
# Fonction principale
# ──────────────────────────────────────────────────────────────────────

def analyser_arguments() -> argparse.Namespace:
    """Configure et analyse les arguments en ligne de commande."""
    analyseur = argparse.ArgumentParser(
        description="Pipeline Hydrologique - Interface de configuration"
    )
    analyseur.add_argument(
        "--config",
        type=str,
        help="Chemin vers le fichier config.yaml",
        default=None
    )
    analyseur.add_argument(
        "--default",
        type=str,
        help="Chemin vers le fichier default_config.yaml",
        default=None
    )
    return analyseur.parse_args()

def charger_configuration(config_path: str, default_path: str, logger: logging.Logger) -> Optional["Config"]:
    """Tente de charger une configuration à partir des fichiers YAML."""
    try:
        return config_io.from_yaml_pair(config_path, default_path)
    except Exception as e:
        logger.error("Échec du chargement des configurations YAML : %s", e)
        return None


def lancer_interface(configuration: Optional[gui.PipelineConfigGUI] = None):
    """Initialise et lance l'interface graphique."""
    application = gui.PipelineConfigGUI(cfg=configuration)
    application.mainloop()

def main() -> None:
    """Point d'entrée principal de l'application."""
    # Configuration initiale
    args = analyser_arguments()
    logger = logging_setup.setup_logging()

    # Gestion des différents cas d'utilisation
    if args.config and args.default:
        configuration = charger_configuration(args.config, args.default, logger)
        if configuration:
            logger.info("Configuration préchargée avec succès")
        else:
            logger.info("Lancement avec configuration par défaut")
    else:
        logger.info("Lancement sans configuration préchargée")
        configuration = None

    # Lancement de l'interface
    lancer_interface(configuration)

# ──────────────────────────────────────────────────────────────────────
# Point d'entrée du script
# ──────────────────────────────────────────────────────────────────────

if __name__ == "__main__":
    main()
